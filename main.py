from time import ctime, strftime
from random import randint
from asyncio import sleep
from aiogram import Bot, Dispatcher, executor, types
from aiohttp import ClientSession
from config import *

print(r"   ____                   ____              __     __  __            ____        __ ")
print(r"  / __ \____  ___  ____  / __ \____  __  __/ /__  / /_/ /____       / __ )____  / /_")
print(r" / / / / __ \/ _ \/ __ \/ /_/ / __ \/ / / / / _ \/ __/ __/ _ \     / __  / __ \/ __/")
print(r"/ /_/ / /_/ /  __/ / / / _, _/ /_/ / /_/ / /  __/ /_/ /_/  __/    / /_/ / /_/ / /_  ")
print(r"\____/ .___/\___/_/ /_/_/ |_|\____/\____/_/\___/\__/\__/\___/    /_____/\____/\__/  ")
print(r"    /_/                                                                             ")


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logfilename = f"log_{strftime(logfilename_date)}"

markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
markup1.add(types.KeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç ‚ùì"),
            types.KeyboardButton("–î–∞–π—Å üé≤"),
            types.KeyboardButton("–ó–∞–∫—Ä–∏—Ç–∏ ‚ùå"),
            types.KeyboardButton("–ì—Ä–∞—Ç–∏"))


async def log(text):
    print(text)
    if enablelog is True:
        with open(f'{logfoldername}/{logfilename}.txt', 'a', encoding="utf-8") as file:
            file.write(f"\n{text}")


async def logheader(msg):
    await log(f"--------------------\n{ctime()}\n"
              f"{msg.from_user.first_name} {msg.from_user.last_name} @{msg.from_user.username} id={msg.from_user.id}\n"
              f"{msg.chat.title} {msg.chat.invite_link} id={msg.chat.id}\n-")


async def randomorg_parse(minimum, maximum):
    async with ClientSession() as session:
        async with session.get(f"https://www.random.org/integers/"
                               f"?num=1&min={minimum}&max={maximum}&col=1&base=10&format=plain&rnd=new") as response:
            return int(await response.text())


@dp.message_handler(commands=["start"])
async def start(message):
    await logheader(message)
    await log("–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Å—Ç–∞—Ä—Ç")

    send_mess = f"<b>–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –£ —Ü—å–æ–º—É –±–æ—Ç—ñ —Ç–∏ –∑–º–æ–∂–µ—à –∫—Ä—É—Ç–∏—Ç–∏ —Ä—É–ª–µ—Ç–∫—É.</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html")

    send_mess = "<b>–û—Å–∫—ñ–ª—å–∫–∏ –±–æ—Ç –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –≤—ñ–Ω –Ω–µ —Ö–æ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ." \
                " –ß–µ—Ä–µ–∑ —Ü–µ —è –Ω–µ –º–æ–∂—É —Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º 24/7. –ü—Ä–∏–Ω–æ—à—É —Å–≤–æ—ó –≤–∏–±–∞—á–µ–Ω–Ω—è!</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html")

    send_mess = "<b>–í–∞–∂–ª–∏–≤–æ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø: </b>\n" \
                "–í –±–æ—Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø–∞—Ö –Ω–∞ —Ä—ñ–≤–Ω—ñ Telegram API." \
                " –í—ñ–Ω –Ω–µ –∑–º–æ–∂–µ –∑–∞ –≤–∞–º–∏ –ø—ñ–¥–≥–ª—è–¥–∞—Ç–∏ :)\n" \
                "<b><a href='https://core.telegram.org/bots#privacy-mode'>–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ</a></b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html", disable_web_page_preview=True)

    send_mess = helpmsg + "\n\n\n<b>–ê–±–æ –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏:</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html")

    send_mess = "<b>üá∫üá¶ –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html", reply_markup=markup1)

    await log("–°—Ç–∞—Ä—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")


@dp.message_handler(commands=["roll"])
async def roll(message):
    await logheader(message)
    send_mess = "<b>–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ random.org</b>"
    roll_mess = await bot.send_message(message.chat.id, send_mess, parse_mode="html", disable_web_page_preview=True)
    gamecode = randint(100, 999)
    await log(f"{gamecode} - –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ random.org...")

    num = await randomorg_parse(0, 36)
    if num == 0:
        result = "–ó–µ—Ä–æ! üü¢ –ó–µ–ª–µ–Ω–∏–π"
    elif num == 1 or num == 3 or num == 5 or num == 7 or num == 9 or num == 12 or num == 14 or num == 16 or num == 18\
            or num == 19 or num == 21 or num == 23 or num == 25 or num == 27 or num == 30 or num == 32 or num == 34\
            or num == 36:
        result = f"{num}, üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π"
    elif num == 2 or num == 4 or num == 6 or num == 8 or num == 10 or num == 11 or num == 13 or num == 15 or num == 17\
            or num == 20 or num == 22 or num == 24 or num == 26 or num == 28 or num == 29 or num == 31 or num == 33\
            or num == 35:
        result = f"{num}, ‚ö´ –ß–æ—Ä–Ω–∏–π"
    else:
        result = "–ü–æ–º–∏–ª–∫–∞. –°–∫–æ—Ä—ñ—à–µ –∑–∞ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ random.org"

    await log(f"{gamecode} - –†–µ–∑—É–ª—å—Ç–∞—Ç - {result}.")
    await bot.edit_message_text(chat_id=message.chat.id, message_id=roll_mess.message_id,
                                text=f"<b>{message.from_user.first_name}, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}</b>",
                                parse_mode="html", disable_web_page_preview=True)
    await log(f"{gamecode} - –ù–∞–¥—ñ—Å–ª–∞–Ω–æ.")


@dp.message_handler(commands=["rnd"])
async def rnd_command(message):
    await logheader(message)
    await log("–ó–∞–ø–∏—Ç–∞–Ω–∏–π rnd.")

    if message.text == "/rnd":
        await bot.send_message(message.chat.id, rnd_no_args, parse_mode="html")
        await log("–õ—é–¥–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.")
    else:
        minmax = message.text.replace("/rnd ", "")
        min_num, max_mun = minmax.split()
        min_num_int, max_mun_int = int(min_num), int(max_mun)

        send_mess = "<b>–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ random.org</b>"
        rnd_mess = await bot.send_message(message.chat.id, send_mess, parse_mode="html")

        if min_num_int >= 1000000000 or max_mun_int >= 1000000000 or min_num > max_mun:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=rnd_mess.message_id,
                                        text=rnd_something_went_wrong, parse_mode="html")
            await log("–õ—é–¥–∏–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–ª–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.")
        else:
            result = await randomorg_parse(min_num, max_mun)
            await bot.edit_message_text(chat_id=message.chat.id, message_id=rnd_mess.message_id,
                                        text=f"<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ: {min_num}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ: {max_mun}\n\n"
                                             f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}</b>", parse_mode="html")
            await log(f"–í–∏–π—à–ª–æ {result} –∏–∑ {min_num} –Ω–∞ {max_mun}")


@dp.message_handler(commands=["ping"])
async def ping(message):
    await logheader(message)
    await log("–ü—ñ–Ω–≥?")
    send_mess = "<b>–ü–æ–Ω–≥! –Ø –∂–∏–≤–∏–π!</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html")
    await log("–ü–æ–Ω–≥!")


@dp.message_handler(commands=["disclaimer"])
async def disclaimer(message):
    await logheader(message)
    await log("–ó–∞–ø–∏—Ç–∞–Ω–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä.")
    await bot.send_message(message.chat.id, disclaimer_text, parse_mode="html")
    await log("–î–∏—Å–∫–ª–µ–π–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@dp.message_handler(commands=["author"])
async def author(message):
    await logheader(message)
    await log("–ó–∞–ø—Ä–æ—à–µ–Ω–∏–π –∞–≤—Ç–æ—Ä.")
    send_mess = "<b>üßëüèª‚Äçüíª –ú—ñ–π –∞–≤—Ç–æ—Ä - @anton165\n–ô–æ–º—É –º–æ–∂–Ω–∞ –¥–∞–≤–∞—Ç–∏ —ñ–¥–µ—ó –¥–ª—è –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É –±–æ—Ç—ñ.</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html")
    await log("–ê–≤—Ç–æ—Ä –∑–∞—Å–ª–∞–Ω–∏–π)")


@dp.message_handler(commands=["keyboard"])
async def keyboard(message):
    await logheader(message)
    await log("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏!")
    send_mess = "<b>–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞!</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html", reply_markup=markup1)
    await log("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞.")


@dp.message_handler(commands=['rm_keyboard'])
async def rm_keyboard(message):
    await logheader(message)
    await log("–ó–∞–ø–∏—Ç–∞–Ω–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏!")
    send_mess = f"<b>–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä–∏—Ç–∞!</b>\n–î–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–∞–ø–∏—à—ñ—Ç—å <b>/keyboard</b>"
    await bot.send_message(message.chat.id, send_mess, parse_mode="html", reply_markup=types.ReplyKeyboardRemove())
    await log("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä–∏—Ç–∞.")


@dp.message_handler(commands=["orlanka"])
async def orlanka(message):
    await logheader(message)
    gamecode = randint(10, 99)
    send_mess = "<b>–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ random.org</b>"
    oreshka_mess = await bot.send_message(message.chat.id, send_mess, parse_mode="html", disable_web_page_preview=True)
    await log(f"{gamecode} - –ó–∞–ø–∏—Ç–∞–Ω–∞ –æ—Ä–ª—è–Ω–∫–∞.")
    oreshka = await randomorg_parse(1, 2)

    resultoreshka = "–ü–æ–º–∏–ª–∫–∞. –°–∫–æ—Ä—ñ—à–µ –∑–∞ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ random.org"
    if oreshka == 1:
        await log(f"{gamecode} - –í–∏–ø–∞–≤ –æ—Ä–µ–ª. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é...")
        resultoreshka = "–û—Ä–µ–ª"
    elif oreshka == 2:
        await log(f"{gamecode} - –í–∏–ø–∞–ª–∞ —Ä–µ—à–∫–∞. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é...")
        resultoreshka = "–†–µ—à–∫–∞"

    await bot.edit_message_text(chat_id=message.chat.id, message_id=oreshka_mess.message_id,
                                text=f"<b>{message.from_user.first_name}, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{resultoreshka}.</b>",
                                parse_mode="html")
    await log(f"{gamecode} - –ù–∞–¥—ñ—Å–ª–∞–Ω–æ.")


@dp.message_handler(commands=["dice"])
async def dice(message):
    await logheader(message)
    gamecode = randint(10, 99)
    dice_sleep = 3
    await log(f"{gamecode} - –ó–∞–ø—Ä–æ—à–µ–Ω–∏–π –¥–∞–π—Å.")
    dice_message = await bot.send_dice(message.chat.id, emoji="üé≤")
    await log(f"{gamecode} - –ü—ñ–¥–∫–∏–Ω—É–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_message.dice.value}. –ß–µ–∫–∞—î–º–æ {dice_sleep} —Å–µ–∫...")
    send_mess = "<b>–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...</b>"
    dice_comment_message = await bot.send_message(message.chat.id, send_mess, parse_mode="html")

    dice_emoji = ""
    if dice_message.dice.value == 1:
        dice_emoji = "‚öÄ"
    elif dice_message.dice.value == 2:
        dice_emoji = "‚öÅ"
    elif dice_message.dice.value == 3:
        dice_emoji = "‚öÇ"
    elif dice_message.dice.value == 4:
        dice_emoji = "‚öÉ"
    elif dice_message.dice.value == 5:
        dice_emoji = "‚öÑ"
    elif dice_message.dice.value == 6:
        dice_emoji = "‚öÖ"

    await sleep(dice_sleep)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=dice_comment_message.message_id,
                                text=f"<b>{message.from_user.first_name}, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{dice_emoji}"
                                     f" {dice_message.dice.value}</b>", parse_mode="html")
    await log(f"{gamecode} - –ù–∞–¥—ñ—Å–ª–∞–Ω–æ.")


@dp.message_handler(commands=["fact"])
async def fact(message):
    await logheader(message)
    await log("–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Ñ–∞–∫—Ç.")
    send_fact_mess = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!"
    rnd_fact = randint(1, howmanyfacts)

    if rnd_fact == 1:
        send_fact_mess = fact1
    elif rnd_fact == 2:
        send_fact_mess = fact2
    elif rnd_fact == 3:
        send_fact_mess = fact3
    elif rnd_fact == 4:
        send_fact_mess = fact4
    elif rnd_fact == 5:
        send_fact_mess = fact5

    await bot.send_message(message.chat.id, "<b>–¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç:</b>\n" + send_fact_mess, parse_mode="html",
                           disable_web_page_preview=True)

    await log(f"–Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–∞–∫—Ç {rnd_fact} –∑ {howmanyfacts}. –ô–æ–≥–æ –∑–º—ñ—Å—Ç:\n{send_fact_mess}")


@dp.message_handler(commands=["help"])
async def help_command(message):
    await logheader(message)
    await log("–ó–∞–ø–∏—Ç–∞–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞")
    send_mess = helpmsg
    await bot.send_message(message.chat.id, send_mess, parse_mode="html")
    await log("–ì–æ—Ç–æ–≤–æ")


@dp.message_handler(content_types=["text"])
async def mess(message):
    get_message_bot = message.text.strip().lower()
    if get_message_bot == "–≥—Ä–∞—Ç–∏":
        await log("--------------------\n–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:")
        await roll(message)
    elif get_message_bot == "–∑–∞–∫—Ä–∏—Ç–∏ ‚ùå":
        await log("--------------------\n–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:")
        await rm_keyboard(message)
    elif get_message_bot == "–¥–∞–π—Å üé≤":
        await log("--------------------\n–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:")
        await dice(message)
    elif get_message_bot == "–≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç ‚ùì":
        await log("--------------------\n–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:")
        await fact(message)
    else:
        await log(f"--------------------\n{ctime()}\n{message.from_user.first_name} {message.from_user.last_name}"
                  f" @{message.from_user.username} id={message.from_user.id}\n{message.chat.title}"
                  f" {message.chat.invite_link} id = {message.chat.id}\n-\n–ù–∞–¥—ñ—Å–ª–∞–≤(–ª–∞): {message.text}")
        if message.from_user.id == message.chat.id:
            send_mess = "<b>–Ø –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ :(</b>"
            await bot.send_message(message.chat.id, send_mess, parse_mode="html")
            await log("–ù–∞–ø–∏—Å–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ, —â–æ —è –π–æ–≥–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤")

if __name__ == '__main__':
    print("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!")
    executor.start_polling(dp)
